ARG NODE_VERSION=20.15.0

# Base stage for setup
FROM node:${NODE_VERSION}-slim AS base

WORKDIR /workspace
# enable corepack for pnpm
RUN corepack enable


# Fetcher stage to optimize dependency caching
FROM base AS fetcher

# pnpm fetch only requires lockfile, but we'll need to build workspaces
COPY pnpm*.yaml ./
# mount pnpm store as cache & fetch dependencies
RUN --mount=type=cache,id=pnpm-store,target=/root/.local/share/pnpm-store \
  pnpm fetch --ignore-scripts


# Builder stage to Build the project
FROM fetcher AS builder

# specify the app in apps/ we want to build
ARG APP_NAME
ARG APP_DIR
ENV APP_NAME=${APP_NAME}
WORKDIR /workspace
COPY . .

# Install dependencies
RUN pnpm install --frozen-lockfile
# Build only the specific app
RUN pnpm turbo run build --filter="${APP_NAME}"


# Prepare production dependencies
FROM builder AS deployer

WORKDIR /workspace
# deploy app
RUN pnpm --filter ${APP_NAME} deploy --prod --ignore-scripts ./out


# Final image
FROM base AS runner

ARG PORT=3000
ARG APP_DIR
ENV PORT=${PORT}
ENV NODE_ENV=production
WORKDIR /workspace

# Don't run production as root
RUN addgroup --system --gid 1001 mygroup && \
    adduser --system --uid 1001 --gid 1001 myuser && \
    mkdir -p /home/myuser/.pm2/logs && \
    mkdir -p /home/myuser/.pm2/pids && \
    chown -R myuser:mygroup /home/myuser/.pm2

USER myuser
ENV PM2_HOME=/home/myuser/.pm2

# copy files needed to run the app from deployer stage
COPY --chown=myuser:mygroup --from=deployer /workspace/out/package.json .
COPY --chown=myuser:mygroup --from=deployer /workspace/out/ecosystem.config.json .
COPY --chown=myuser:mygroup --from=deployer /workspace/out/node_modules/ ./node_modules
COPY --chown=myuser:mygroup --from=deployer /workspace/out/dist/ ./dist

EXPOSE ${PORT}

CMD ["npm", "run", "start"]

