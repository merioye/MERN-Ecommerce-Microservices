generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN      @map("admin")
  ADMIN_USER @map("admin_user")
  VENDOR     @map("vendor")
  CUSTOMER   @map("customer")
  SYSTEM     @map("system")
}

model UserAccount {
  id                           Int                    @id @default(autoincrement())
  firstName                    String                 @map("first_name")
  lastName                     String                 @map("last_name")
  email                        String                 @unique
  profileUrl                   String?                @map("profile_url")
  userType                     Role                   @map("user_type")
  userReferenceId              Int                    @map("user_reference_id")
  createdAt                    DateTime               @default(now()) @map("created_at")
  updatedAt                    DateTime               @updatedAt() @map("updated_at")
  createdAdmins                Admin[]                @relation("AdminCreatedBy")
  updatedAdmins                Admin[]                @relation("AdminUpdatedBy")
  deletedAdmins                Admin[]                @relation("AdminDeletedBy")
  createdAdminGroups           AdminGroup[]           @relation("AdminGroupCreatedBy")
  updatedAdminGroups           AdminGroup[]           @relation("AdminGroupUpdatedBy")
  deletedAdminGroups           AdminGroup[]           @relation("AdminGroupDeletedBy")
  createdPermissionGroups      PermissionGroup[]      @relation("PermissionGroupCreatedBy")
  updatedPermissionGroups      PermissionGroup[]      @relation("PermissionGroupUpdatedBy")
  createdPermissions           Permission[]           @relation("PermissionCreatedBy")
  updatedPermissions           Permission[]           @relation("PermissionUpdatedBy")
  createdAdminGroupPermissions AdminGroupPermission[] @relation("AdminGroupPermissionCreatedBy")
  updatedAdminGroupPermissions AdminGroupPermission[] @relation("AdminGroupPermissionUpdatedBy")
  createdAdminPermissions      AdminPermission[]      @relation("AdminPermissionCreatedBy")
  updatedAdminPermissions      AdminPermission[]      @relation("AdminPermissionUpdatedBy")

  @@unique([userType, userReferenceId])
  @@map("tbl_user_accounts")
}

model AdminGroup {
  id            Int                    @id @default(autoincrement())
  name          String                 @unique
  slug          String                 @unique
  description   String?                @default("")
  admins        Admin[]
  isActive      Boolean                @default(true) @map("is_active")
  isDeleted     Boolean                @default(false) @map("is_deleted")
  createdAt     DateTime               @default(now()) @map("created_at")
  updatedAt     DateTime               @updatedAt() @map("updated_at")
  deletedAt     DateTime?              @map("deleted_at")
  createdBy     Int?                   @map("created_by")
  updatedBy     Int?                   @map("updated_by")
  deletedBy     Int?                   @map("deleted_by")
  createdByUser UserAccount?           @relation("AdminGroupCreatedBy", fields: [createdBy], references: [id], onDelete: SetNull, onUpdate: Cascade)
  updatedByUser UserAccount?           @relation("AdminGroupUpdatedBy", fields: [updatedBy], references: [id], onDelete: SetNull, onUpdate: Cascade)
  deletedByUser UserAccount?           @relation("AdminGroupDeletedBy", fields: [deletedBy], references: [id], onDelete: SetNull, onUpdate: Cascade)
  permissions   AdminGroupPermission[]

  @@map("tbl_admin_groups")
}

model Admin {
  id            Int               @id @default(autoincrement())
  firstName     String            @map("first_name")
  lastName      String            @map("last_name")
  email         String            @unique
  password      String
  profileUrl    String?           @map("profile_url")
  profileId     String?           @map("profile_id")
  phoneNumber   String?           @map("phone_number")
  address       String?
  mfaEnabled    Boolean           @default(false) @map("mfa_enabled")
  isAdmin       Boolean           @default(false) @map("is_admin")
  isActive      Boolean           @default(true) @map("is_active")
  isDeleted     Boolean           @default(false) @map("is_deleted")
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt() @map("updated_at")
  deletedAt     DateTime?         @map("deleted_at")
  adminGroupId  Int               @map("admin_group_id")
  createdBy     Int?              @map("created_by")
  updatedBy     Int?              @map("updated_by")
  deletedBy     Int?              @map("deleted_by")
  adminGroup    AdminGroup        @relation(fields: [adminGroupId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdByUser UserAccount?      @relation("AdminCreatedBy", fields: [createdBy], references: [id], onDelete: SetNull, onUpdate: Cascade)
  updatedByUser UserAccount?      @relation("AdminUpdatedBy", fields: [updatedBy], references: [id], onDelete: SetNull, onUpdate: Cascade)
  deletedByUser UserAccount?      @relation("AdminDeletedBy", fields: [deletedBy], references: [id], onDelete: SetNull, onUpdate: Cascade)
  permissions   AdminPermission[]

  @@map("tbl_admins")
}

model PermissionGroup {
  id            Int          @id @default(autoincrement())
  name          String       @unique
  slug          String       @unique
  description   String?
  sortOrder     Int          @map("sort_order")
  permissions   Permission[]
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt() @map("updated_at")
  createdBy     Int?         @map("created_by")
  updatedBy     Int?         @map("updated_by")
  createdByUser UserAccount? @relation("PermissionGroupCreatedBy", fields: [createdBy], references: [id], onDelete: SetNull, onUpdate: Cascade)
  updatedByUser UserAccount? @relation("PermissionGroupUpdatedBy", fields: [updatedBy], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("tbl_permission_groups")
}

model Permission {
  id                    Int                    @id @default(autoincrement())
  permissionGroupId     Int                    @map("permission_group_id")
  name                  String                 @unique
  slug                  String                 @unique
  sortOrder             Int                    @map("sort_order")
  createdAt             DateTime               @default(now()) @map("created_at")
  updatedAt             DateTime               @updatedAt() @map("updated_at")
  createdBy             Int?                   @map("created_by")
  updatedBy             Int?                   @map("updated_by")
  permissionGroup       PermissionGroup        @relation(fields: [permissionGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdByUser         UserAccount?           @relation("PermissionCreatedBy", fields: [createdBy], references: [id], onDelete: SetNull, onUpdate: Cascade)
  updatedByUser         UserAccount?           @relation("PermissionUpdatedBy", fields: [updatedBy], references: [id], onDelete: SetNull, onUpdate: Cascade)
  adminGroupPermissions AdminGroupPermission[]
  adminPermissions      AdminPermission[]

  @@map("tbl_permissions")
}

model AdminGroupPermission {
  id            Int          @id @default(autoincrement())
  adminGroupId  Int          @map("admin_group_id")
  permissionId  Int          @map("permission_id")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt() @map("updated_at")
  createdBy     Int?         @map("created_by")
  updatedBy     Int?         @map("updated_by")
  adminGroup    AdminGroup   @relation(fields: [adminGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permission    Permission   @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdByUser UserAccount? @relation("AdminGroupPermissionCreatedBy", fields: [createdBy], references: [id], onDelete: SetNull, onUpdate: Cascade)
  updatedByUser UserAccount? @relation("AdminGroupPermissionUpdatedBy", fields: [updatedBy], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("tbl_admin_group_permissions")
}

model AdminPermission {
  id            Int          @id @default(autoincrement())
  adminId       Int          @map("admin_id")
  permissionId  Int          @map("permission_id")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt() @map("updated_at")
  createdBy     Int?         @map("created_by")
  updatedBy     Int?         @map("updated_by")
  admin         Admin        @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permission    Permission   @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdByUser UserAccount? @relation("AdminPermissionCreatedBy", fields: [createdBy], references: [id], onDelete: SetNull, onUpdate: Cascade)
  updatedByUser UserAccount? @relation("AdminPermissionUpdatedBy", fields: [updatedBy], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("tbl_admin_permissions")
}
