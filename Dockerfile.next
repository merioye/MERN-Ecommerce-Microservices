ARG NODE_VERSION=20.15.0

# Base stage for setup
FROM node:${NODE_VERSION}-slim AS base

WORKDIR /workspace
# enable corepack for pnpm
RUN corepack enable


# Fetcher stage to optimize dependency caching
FROM base AS fetcher

# pnpm fetch only requires lockfile, but we'll need to build workspaces
COPY pnpm*.yaml ./
# mount pnpm store as cache & fetch dependencies
RUN --mount=type=cache,id=pnpm-store,target=/root/.local/share/pnpm-store \
  pnpm fetch --ignore-scripts


# Builder stage to Build the project
FROM fetcher AS builder

# specify the app in apps/ we want to build
ARG APP_NAME
ENV APP_NAME=${APP_NAME}
WORKDIR /workspace
COPY . .

# Install dependencies
RUN pnpm install --frozen-lockfile
# Build only the specific app
RUN pnpm turbo run build --filter="${APP_NAME}"


# Production dependencies stage
FROM builder AS deployer

WORKDIR /workspace
# deploy app
RUN pnpm --filter ${APP_NAME} deploy --prod --ignore-scripts ./out


# Final image
FROM node:${NODE_VERSION}-slim AS runner

ARG APP_DIR
ARG PORT=3000
ENV PORT=${PORT}
ENV NODE_ENV=production
WORKDIR /workspace

# Create non-root user
RUN addgroup --system --gid 1001 mygroup
RUN adduser --system --uid 1001 myuser

USER myuser

# Copy necessary files from deployer stage
COPY --from=deployer --chown=myuser:mygroup /workspace/out/public ./public
COPY --from=deployer --chown=myuser:mygroup /workspace/out/.next/standalone/apps/${APP_DIR} ./
COPY --from=deployer --chown=myuser:mygroup /workspace/out/.next/standalone/node_modules ./node_modules
COPY --from=deployer --chown=myuser:mygroup /workspace/out/.next/static ./.next/static

EXPOSE ${PORT}

# Command to run the Next.js application
CMD node server.js
# CMD ["tail", "-f", "/dev/null"]